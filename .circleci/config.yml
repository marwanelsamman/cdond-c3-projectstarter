version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        description: work flow id to be added to the stack Name
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflowid>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowid>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowid>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        description: work flow id to be added to the stack Name
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS="$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_<<parameters.workflowid>>)"
            if(( $SUCCESS == 1 ))
              then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm install --save-dev webpack@5.74.0
            npm update kind-of --depth 24
            npm update acorn --depth 13
            npm update js-yaml --depth 4
            npm update ansi-regex --depth 7
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm install --save-dev webpack@5.74.0
            npm update mkdirp --depth 6
            npm update path-parse --depth 3
            npm update kind-of --depth 14
            npm install --save-dev jest@29.1.1
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[0].Outputs[0].OutputValue" --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $MY_FINGERPRINT
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Install Ansible
          command: |
            amazon-linux-extras install ansible2 -y
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws-cli
          command: | 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm init -y
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install some dependencies
          command: |
            yum update -y
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            amazon-linux-extras install ansible2 -y
      - run:
          name: Install Python
          command: |
            yum install python3 -y
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[0].Outputs[0].OutputValue" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # Install NodeJS and NPM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install --lts
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"  

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $MY_FINGERPRINT
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            amazon-linux-extras install ansible2 -y
      - run:
          name: prepare the env file to pass it to backend server
          command: |
            cd ~/project/backend
            echo NODE_ENV=production > .env
            echo VERSION=1 >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> .env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> .env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env

      - run:
          name: Deploy backend
          command: |
            # Install NodeJS and NPM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install --lts
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # run ansible playbook
            cd .circleci/ansible/
            echo -e "Contents  of the inventory.txt file is: \n $(<inventory.txt )"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"  

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install tar and curl
          command: |
            apk update --no-cache
            apk add --no-cache tar curl
      - run:
          name: Install aws-cli
          command: |
            apk add --no-cache aws-cli
      - run:
          name: Install NodeJS and NPM
          command: |
            apk add --update nodejs npm
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[0].Outputs[0].OutputValue" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            # test Connection
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 2
              fi
      #- revert-migrations:
          #workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      #- destroy-environment:
          #workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 